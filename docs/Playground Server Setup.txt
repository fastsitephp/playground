
# ------------------------------------------------------------------------------------
#
#   This file describes step by step how the Playground Server is setup.
#   These instructions apply specifically to Ubuntu 18.04.2 LTS;
#   if using them for another build of Linux or Unix you will likely
#   need to make changes to the commands used. The PHP custom build itself
#   and PHP settings will provide the needed security settings so it can be
#   used with Windows Servers as well, however Windows setup is different.
#
#   http://releases.ubuntu.com/18.04/
#
# ------------------------------------------------------------------------------------

# Connect to Server from a Desktop OS or use a Web Based Terminal. 
# For example AWS Lightsail can be used for this however because a large
# PHP source file is being edited on the directly on the server a GUI
# program can be used to make the process faster.
#
# This command assumes an Apple macOS computer and key saved in similar location.
# Replace {variables} with your file/directory names. Apple Mac computers provide [ssh]
# built into the Operating System which makes them easy for working with Linux Servers.
#
# NOTE - The [pem] file path would vary on your machine if using an Apple Mac
# and the IP is based on the cloud machine at the time of development.
#
# For Windows User's who want to connect to a Linux/Unix Server see the following programs:
# ssh:
#     https://www.putty.org
#     https://docs.microsoft.com/en-us/windows/wsl/faq
#     https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse
# GUI for File Upload:
#     https://winscp.net
#
cd /Users/{your-name}/sites/keys
sudo chmod 400 {key}.pem
ssh-add -K {key}.pem
ssh -i /Users/{your-name}/sites/keys/{key}.pem ubuntu@1.1.1.1

# Once connected on the new server:

# Install Apache and Required Develompment Libraries
sudo apt update
sudo apt install apache2 apache2-dev libxml2-dev

# Find latest version from:
#   https://www.php.net/downloads.php
# If a new major or minor version of PHP is used then the updates
# should be reviewed to see if there are new security issues to handle.
wget https://www.php.net/distributions/php-7.3.11.tar.bz2

# Decompress
tar xjf php-7.3.11.tar.bz2

# Edit PHP Source Files - see notes in: [PHP Custom Build Instructions.txt]
# To edit with Nano:
    nano ~/php-7.3.11/ext/standard/file.h
    nano ~/php-7.3.11/ext/standard/file.c
# Or use a program such as Transmit:
    https://panic.com/transmit/

# Build PHP
# [make] may take 2 to 10 minutes on the first build. A standard PHP build typically takes
# 10+ minutes however the option [--disable-all] makes this custom build much faster.
# If changes and there are additional builds it runs much faster.
cd php-7.3.11
./configure --with-apxs2=/usr/bin/apxs --disable-all --enable-hash --enable-json --enable-filter --enable-ctype --enable-opcache
make
sudo make install

# Configure PHP and Apache
# For a quick test that runs with all functions enabled run this:
sudo cp php.ini-production /usr/local/lib/php.ini
#
# Otherwise copy the php.ini file to a another place for editing:
cp php.ini-production ~/php.ini
#
# See [PHP INI Settings.txt] for what edits to make
# Then after edits:
sudo cp ~/php.ini /usr/local/lib/php.ini

# Change Apache to use prefork (required after PHP is enabled otherwise Apache won't start)
sudo a2dismod mpm_event
sudo a2enmod mpm_prefork

# File [/etc/apache2/mods-enabled/php7.load] is created
# however [/etc/apache2/mods-enabled/php7.conf] is not created
#
# Create File [php7.conf]:
sudo nano /etc/apache2/mods-enabled/php7.conf
#
# Add Contents:
<FilesMatch \.php$>
    SetHandler application/x-httpd-php
</FilesMatch>
#
# Save using:
#    {control+s} -> {control+x}

# Enable Gzip Compression for JSON Responses
#   (This is not enabled by default on Apache)
sudo nano /etc/apache2/mods-available/deflate.conf
# Add the following under similar commands:
#       AddOutputFilterByType DEFLATE application/json

# Edit Apache Config
sudo nano /etc/apache2/apache2.conf
#
# Under:
#     <Directory /var/www/>
# Add:
#     FallbackResource /index.php
# And Change:
#     AllowOverride None
# To:
#     AllowOverride All
# Save using:
#    {control+s} -> {control+x}

# Restart Apache
sudo service apache2 restart

# Set Permissions
sudo adduser ubuntu www-data
sudo chown ubuntu:www-data -R /var/www
sudo chmod 0775 -R /var/www

# Download and Unzip Playground Site
cd ~
wget https://github.com/fastsitephp/playground/archive/master.zip
wget https://github.com/fastsitephp/fastsitephp/archive/1.0.0.zip
sudo apt install unzip
unzip master.zip
unzip 1.0.0.zip

# Copy Files
cp -r ~/playground-master/app /var/www/app
cp -r ~/playground-master/app_data /var/www/app_data
cp -r ~/playground-master/scripts /var/www/scripts
cp -r ~/playground-master/html/. /var/www/html

# Copy FastSitePHP Framework
# Note - Normally this would be installed using [scripts/install.php], however
# the version of PHP being built does not include [--enable-zip] and other
# settings are disabled so manual commands are used.
mkdir /var/www/vendor
mkdir /var/www/vendor/fastsitephp
cp -r ~/fastsitephp-1.0.0/src /var/www/vendor/fastsitephp/src
cp /var/www/scripts/fast_autoloader.php /var/www/vendor/autoload.php

# Optionally Install [php-fig/log]
# Same as above, normally this would be installed using [scripts/install.php].
cd ~
wget https://github.com/php-fig/log/archive/1.1.2.zip
unzip 1.1.2.zip
mkdir /var/www/vendor/psr
mkdir /var/www/vendor/psr/log
cp -r ~/log-1.1.2/Psr /var/www/vendor/psr/log/Psr
# To test logging use the following when creating a playground page:
    $app->get('/', function() use ($app) {
        $html_logger = new \FastSitePHP\Data\Log\HtmlLogger($app);
        $html_logger->info('This is a Test.');
        $html_logger->error('Application Test');

        return $app->render('home.php', [
            'page_title' => 'Hello World',
        ]);
    });

# View Files
ls /var/www
ls -la /var/www/html

# Delete the default Apache page
rm /var/www/html/index.html

# After copying files, permissions need to be reset.
# If testing locally on the server without client-side UI
# this is needed in order to edit files created by the web service.
sudo chown ubuntu:www-data -R /var/www
sudo chmod 0775 -R /var/www

# Generate a new key and create the [.env] file
# For info on key generation with (xxd...urandom) see:
#     https://www.fastsitephp.com/en/documents/file-encryption-bash
echo "SIGNING_KEY=`xxd -l 32 -c 32 -p /dev/urandom`" | sudo tee /var/www/app_data/.env
# Example File (don't use this, generate your own key):
#   SIGNING_KEY=85ef7bb21b3ee94b9e3e953c9aea23cf6ed03ba3252e19afe7210c788739eb87

# Update Local Playground JavaScript File with the new URL
# Seach for "localhost:3000" or "urlRoot:" in the file and make related changes
#
# File:
#    FastSitePHP\website\public\js\playground.js
# Example:
#   urlRoot: 'http://44.227.46.33/',

# Test the site from the Playground UI to verify it works

# Setup a Cron Job using sudo to check for and delete expired sites.
# Runs once per minute, if not using [sudo] then sites will end up
# not being deleted. The last Cron Job Result including errors is 
# sent to the file [last-cron-job.txt] - [2>&1] redirects stderr to stdout.
sudo crontab -e
# Enter [1] for nano, and add the following after header comments:
* * * * * /usr/local/bin/php /var/www/scripts/delete-expired-sites.php >/var/www/app_data/last-cron-job.txt 2>&1

# To view cron history:
grep CRON /var/log/syslog

# View last result and sites directory:
cat /var/www/app_data/delete-sites-last-result.txt
cat /var/www/app_data/last-cron-job.txt
cd /var/www/html/sites
ls -la

# Additional Steps performed for the live site
https://playground.fastsitephp.com/

# 1) Created Static IP in AWS Lightsail for the Sever: 44.227.46.33
# 2) GoDaddy - Added an A Record for 'playground' that points to the IP
# 3) Update AWS to allow HTTPS in the Firewall on the Networking Tab
# 4) Installed HTTPS Certificate using certbot:
#    https://certbot.eff.org/lets-encrypt/ubuntubionic-apache
#    Host: playground.fastsitephp.com

# Additionally a shell script is used to sync changes from GitHub back to the server
https://github.com/fastsitephp/playground/blob/master/scripts/sync-server-from-github.sh
